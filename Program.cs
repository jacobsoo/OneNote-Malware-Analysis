using System;
using Aspose.Note;
using System.IO;
using System.Collections.Generic;

namespace OneNoteMalwareAnalyser
{
    class Program
    {
        public static string CheckFileFormat(string onepath)
        {
            try
            {
                Document OneNoteFile = new Document(onepath);
                string filenamewoext = Path.GetFileNameWithoutExtension(onepath);
                string ContentDirectoryName = Path.GetDirectoryName(onepath) + "\\" + filenamewoext + "_content";
                switch (OneNoteFile.FileFormat)
                {
                    // https://reference.aspose.com/note/net/aspose.note/document/fileformat/
                    case FileFormat.OneNote2010:
                        // Process OneNote 2010
                        Console.WriteLine("[+] OneNote2010 File Format.");
                        break;
                    case FileFormat.OneNoteOnline:
                        // Process OneNote Online
                        Console.WriteLine("[+] OneNoteOnline File Format");
                        break;
                    case FileFormat.Unknown:
                        Console.WriteLine("[+] OneNote File Format Not Supported");
                        return null;
                }
                if (!Directory.Exists(ContentDirectoryName))
                {
                    Console.WriteLine("[+] Export Directory Path: {0}", ContentDirectoryName);
                    Directory.CreateDirectory(ContentDirectoryName);

                }
                return ContentDirectoryName;
            }
            catch (UnsupportedFileFormatException e){
                Console.WriteLine("[-] This is not a OneNote File.");
            }
            return "";
        }

        public static void ExtractAttachment(string onepath, string exportdirectory){
            // https://reference.aspose.com/note/net/aspose.note/attachedfile/
            Console.WriteLine("[+] Extracted OneNote Document Attachments:");
            string DirectoryName = exportdirectory + "\\OneNoteAttachments";
            if (!Directory.Exists(DirectoryName)){
                Directory.CreateDirectory(DirectoryName);
            }
            Document OneNoteFile = new Document(onepath);
            IList<AttachedFile> onenotelist = OneNoteFile.GetChildNodes<AttachedFile>();
            Console.WriteLine("  [+] Number of attachment: {0}", onenotelist.Count);
            foreach (AttachedFile file in onenotelist){
                using (Stream readStream = new MemoryStream(file.Bytes)){
                    Console.WriteLine("    [+] Extracted Actual Attachment Path: {0} | FileName: {1} | Size: {2}  bytes", Path.GetDirectoryName(file.FilePath), file.FileName, file.Bytes.Length);
                    using (Stream outStream = File.OpenWrite(DirectoryName + "\\" + file.FileName)){
                        readStream.CopyTo(outStream);
                    }
                }
            }
            Console.WriteLine("[+] -> OneNote Document Attachments Extraction Path: {0}", DirectoryName);
        }

        public static void ExtractMetaData(string onepath)
        {
            Document OneNoteFile = new Document(onepath);
            int pagecount = OneNoteFile.GetChildNodes<Page>().Count;
            // https://reference.aspose.com/note/net/aspose.note/document/
            Console.WriteLine("[+] Document's Creation Time: {0}", OneNoteFile.CreationTime);
            Console.WriteLine("[+] Document's Display Name: {0}", OneNoteFile.DisplayName);
            Console.WriteLine("[+] Number of Pages: {0}", pagecount);
            Console.WriteLine("[+] Page's MetaData: ");
            foreach (Page page in OneNoteFile){
                // https://reference.aspose.com/note/net/aspose.note/page/
                Console.WriteLine("  [+] Page's Title: {0}", page.Title);
                Console.WriteLine("  [+] Page's Author: {0}", page.Author);
                Console.WriteLine("  [+] Page's Creation Time: {0}", page.CreationTime);
                Console.WriteLine("  [+] Page's Last Modified Time: {0}", page.LastModifiedTime);
                Console.WriteLine("  [+] Page's Most Recent Author: {0}", page.PageContentRevisionSummary.AuthorMostRecent);
                Console.WriteLine("  [+] Page's Most Recent Last Modified Time: {0}", page.PageContentRevisionSummary.LastModifiedTime); 
            }
        }

        static void Main(string[] args)
        {
            if (args == null || args.Length == 0){
                Console.WriteLine("\n[-] Error: No Arguments Passed");
                Console.WriteLine("[-] Usage: OneNoteAnalyzer.exe --file \"<path_to_onenote>\"");
            }else{
                if (args[0] == "--file")
                {

                    string FilePath = args[1];
                    Console.WriteLine("[+] OneNote Document Path: {0}", FilePath);
                    if (File.Exists(FilePath))
                    {
                        string exportdirectory = CheckFileFormat(FilePath);
                        if(exportdirectory==null || exportdirectory== ""){
                            Console.WriteLine("[-] Try again on another file");
                        }else{
                            // Console.WriteLine(exportdirectory);
                            Console.WriteLine("[+] Extracting Page's MetaData from OneNote Document");
                            ExtractMetaData(FilePath);
                            Console.WriteLine("[+] Extracting Attachment(s) from OneNote Document");
                            ExtractAttachment(FilePath, exportdirectory);
                        }
                    }else{
                        Console.WriteLine("[-] Eror: Invalid Document Path");
                    }
                }else{
                    Console.WriteLine("\n[-] Error: Invalid Arguments");
                    Console.WriteLine("[-] Usage: OneNoteAnalyzer.exe --file \"<Path_to_onenote>\"");
                }
            }
        }
    }
}